#include <iostream>
using namespace std;

const int INF = 1e9; // Valor infinito para inicializar el arreglo de soluciones.

int minimoMonedas(int n, int P, int c[]) {
    int dp[P + 1]; // Arreglo para almacenar las soluciones óptimas.

    // Inicializar el arreglo con un valor infinito, excepto la posición dp[0].
    for (int i = 1; i <= P; i++) {
        dp[i] = INF;
    }
    dp[0] = 0; // No se necesitan monedas para formar una suma de 0.

    // Calcular la cantidad mínima de monedas necesarias para cada suma posible.
    for (int i = 1; i <= P; i++) {
        for (int j = 0; j < n; j++) {
            if (c[j] <= i) {
                dp[i] = min(dp[i], dp[i - c[j]] + 1);
            }
        }
    }

    return dp[P];
}

int main() {
    int n = 3; // Cantidad de monedas disponibles
    int P = 8; // Suma deseada
    int c[] = {1, 4, 6}; // Valores de las monedas

    int resultado = minimoMonedas(n, P, c);
    cout << "Cantidad mínima de monedas necesarias: " << resultado << endl;

    return 0;
}
